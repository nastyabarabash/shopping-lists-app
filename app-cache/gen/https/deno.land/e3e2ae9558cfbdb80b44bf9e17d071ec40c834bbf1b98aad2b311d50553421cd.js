import { crypto, hex } from "../deps.ts";
const encoder = new TextEncoder();
const decoder = new TextDecoder();
async function md5(bytes) {
  return decoder.decode(hex.encode(new Uint8Array(await crypto.subtle.digest("MD5", bytes))));
}
// AuthenticationMD5Password
// The actual PasswordMessage can be computed in SQL as:
//  concat('md5', md5(concat(md5(concat(password, username)), random-salt))).
// (Keep in mind the md5() function returns its result as a hex string.)
export async function hashMd5Password(password, username, salt) {
  const innerHash = await md5(encoder.encode(password + username));
  const innerBytes = encoder.encode(innerHash);
  const outerBuffer = new Uint8Array(innerBytes.length + salt.length);
  outerBuffer.set(innerBytes);
  outerBuffer.set(salt, innerBytes.length);
  const outerHash = await md5(outerBuffer);
  return "md5" + outerHash;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvcG9zdGdyZXNAdjAuMTcuMC9jb25uZWN0aW9uL2F1dGgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3J5cHRvLCBoZXggfSBmcm9tIFwiLi4vZGVwcy50c1wiO1xuXG5jb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG5jb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG5cbmFzeW5jIGZ1bmN0aW9uIG1kNShieXRlczogVWludDhBcnJheSk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBkZWNvZGVyLmRlY29kZShcbiAgICBoZXguZW5jb2RlKG5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KFwiTUQ1XCIsIGJ5dGVzKSkpLFxuICApO1xufVxuXG4vLyBBdXRoZW50aWNhdGlvbk1ENVBhc3N3b3JkXG4vLyBUaGUgYWN0dWFsIFBhc3N3b3JkTWVzc2FnZSBjYW4gYmUgY29tcHV0ZWQgaW4gU1FMIGFzOlxuLy8gIGNvbmNhdCgnbWQ1JywgbWQ1KGNvbmNhdChtZDUoY29uY2F0KHBhc3N3b3JkLCB1c2VybmFtZSkpLCByYW5kb20tc2FsdCkpKS5cbi8vIChLZWVwIGluIG1pbmQgdGhlIG1kNSgpIGZ1bmN0aW9uIHJldHVybnMgaXRzIHJlc3VsdCBhcyBhIGhleCBzdHJpbmcuKVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhc2hNZDVQYXNzd29yZChcbiAgcGFzc3dvcmQ6IHN0cmluZyxcbiAgdXNlcm5hbWU6IHN0cmluZyxcbiAgc2FsdDogVWludDhBcnJheSxcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IGlubmVySGFzaCA9IGF3YWl0IG1kNShlbmNvZGVyLmVuY29kZShwYXNzd29yZCArIHVzZXJuYW1lKSk7XG4gIGNvbnN0IGlubmVyQnl0ZXMgPSBlbmNvZGVyLmVuY29kZShpbm5lckhhc2gpO1xuICBjb25zdCBvdXRlckJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGlubmVyQnl0ZXMubGVuZ3RoICsgc2FsdC5sZW5ndGgpO1xuICBvdXRlckJ1ZmZlci5zZXQoaW5uZXJCeXRlcyk7XG4gIG91dGVyQnVmZmVyLnNldChzYWx0LCBpbm5lckJ5dGVzLmxlbmd0aCk7XG4gIGNvbnN0IG91dGVySGFzaCA9IGF3YWl0IG1kNShvdXRlckJ1ZmZlcik7XG4gIHJldHVybiBcIm1kNVwiICsgb3V0ZXJIYXNoO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsTUFBTSxFQUFFLEdBQUcsUUFBUSxhQUFhO0FBRXpDLE1BQU0sVUFBVSxJQUFJO0FBQ3BCLE1BQU0sVUFBVSxJQUFJO0FBRXBCLGVBQWUsSUFBSSxLQUFpQjtFQUNsQyxPQUFPLFFBQVEsTUFBTSxDQUNuQixJQUFJLE1BQU0sQ0FBQyxJQUFJLFdBQVcsTUFBTSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTztBQUVoRTtBQUVBLDRCQUE0QjtBQUM1Qix3REFBd0Q7QUFDeEQsNkVBQTZFO0FBQzdFLHdFQUF3RTtBQUN4RSxPQUFPLGVBQWUsZ0JBQ3BCLFFBQWdCLEVBQ2hCLFFBQWdCLEVBQ2hCLElBQWdCO0VBRWhCLE1BQU0sWUFBWSxNQUFNLElBQUksUUFBUSxNQUFNLENBQUMsV0FBVztFQUN0RCxNQUFNLGFBQWEsUUFBUSxNQUFNLENBQUM7RUFDbEMsTUFBTSxjQUFjLElBQUksV0FBVyxXQUFXLE1BQU0sR0FBRyxLQUFLLE1BQU07RUFDbEUsWUFBWSxHQUFHLENBQUM7RUFDaEIsWUFBWSxHQUFHLENBQUMsTUFBTSxXQUFXLE1BQU07RUFDdkMsTUFBTSxZQUFZLE1BQU0sSUFBSTtFQUM1QixPQUFPLFFBQVE7QUFDakIifQ==